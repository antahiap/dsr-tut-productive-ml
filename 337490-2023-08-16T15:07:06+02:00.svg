<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="634" onload="init(evt)" viewBox="0 0 1200 634" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="634" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record --pid 337490</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="623.00"> </text><svg id="frames" x="10" width="1180" total_samples="8673"><g><title>_read_from_self (asyncio/selector_events.py:115) (61 samples, 0.70%)</title><rect x="0.2421%" y="260" width="0.7033%" height="15" fill="rgb(227,0,7)" fg:x="21" fg:w="61"/><text x="0.4921%" y="270.50"></text></g><g><title>_read_ready__data_received (asyncio/selector_events.py:854) (88 samples, 1.01%)</title><rect x="0.9455%" y="276" width="1.0146%" height="15" fill="rgb(217,0,24)" fg:x="82" fg:w="88"/><text x="1.1955%" y="286.50"></text></g><g><title>handle_events (uvicorn/protocols/http/h11_impl.py:187) (9 samples, 0.10%)</title><rect x="1.9601%" y="308" width="0.1038%" height="15" fill="rgb(221,193,54)" fg:x="170" fg:w="9"/><text x="2.2101%" y="318.50"></text></g><g><title>_read_ready (asyncio/selector_events.py:811) (106 samples, 1.22%)</title><rect x="0.9455%" y="260" width="1.2222%" height="15" fill="rgb(248,212,6)" fg:x="82" fg:w="106"/><text x="1.1955%" y="270.50"></text></g><g><title>_read_ready__data_received (asyncio/selector_events.py:868) (18 samples, 0.21%)</title><rect x="1.9601%" y="276" width="0.2075%" height="15" fill="rgb(208,68,35)" fg:x="170" fg:w="18"/><text x="2.2101%" y="286.50"></text></g><g><title>data_received (uvicorn/protocols/http/h11_impl.py:182) (18 samples, 0.21%)</title><rect x="1.9601%" y="292" width="0.2075%" height="15" fill="rgb(232,128,0)" fg:x="170" fg:w="18"/><text x="2.2101%" y="302.50"></text></g><g><title>solve_dependencies (fastapi/dependencies/utils.py:594) (12 samples, 0.14%)</title><rect x="2.5251%" y="436" width="0.1384%" height="15" fill="rgb(207,160,47)" fg:x="219" fg:w="12"/><text x="2.7751%" y="446.50"></text></g><g><title>query_params (starlette/requests.py:119) (11 samples, 0.13%)</title><rect x="2.5366%" y="452" width="0.1268%" height="15" fill="rgb(228,23,34)" fg:x="220" fg:w="11"/><text x="2.7866%" y="462.50"></text></g><g><title>app (fastapi/routing.py:271) (25 samples, 0.29%)</title><rect x="2.4328%" y="420" width="0.2883%" height="15" fill="rgb(218,30,26)" fg:x="211" fg:w="25"/><text x="2.6828%" y="430.50"></text></g><g><title>__aenter__ (anyio/_backends/_asyncio.py:1797) (14 samples, 0.16%)</title><rect x="2.8710%" y="500" width="0.1614%" height="15" fill="rgb(220,122,19)" fg:x="249" fg:w="14"/><text x="3.1210%" y="510.50"></text></g><g><title>acquire (anyio/_backends/_asyncio.py:1858) (13 samples, 0.15%)</title><rect x="2.8825%" y="516" width="0.1499%" height="15" fill="rgb(250,228,42)" fg:x="250" fg:w="13"/><text x="3.1325%" y="526.50"></text></g><g><title>run_sync_in_worker_thread (anyio/_backends/_asyncio.py:852) (20 samples, 0.23%)</title><rect x="2.8594%" y="484" width="0.2306%" height="15" fill="rgb(240,193,28)" fg:x="248" fg:w="20"/><text x="3.1094%" y="494.50"></text></g><g><title>run_sync (anyio/to_thread.py:33) (39 samples, 0.45%)</title><rect x="2.7672%" y="468" width="0.4497%" height="15" fill="rgb(216,20,37)" fg:x="240" fg:w="39"/><text x="3.0172%" y="478.50"></text></g><g><title>app (fastapi/routing.py:278) (44 samples, 0.51%)</title><rect x="2.7211%" y="420" width="0.5073%" height="15" fill="rgb(206,188,39)" fg:x="236" fg:w="44"/><text x="2.9711%" y="430.50"></text></g><g><title>run_endpoint_function (fastapi/routing.py:192) (44 samples, 0.51%)</title><rect x="2.7211%" y="436" width="0.5073%" height="15" fill="rgb(217,207,13)" fg:x="236" fg:w="44"/><text x="2.9711%" y="446.50"></text></g><g><title>run_in_threadpool (starlette/concurrency.py:41) (42 samples, 0.48%)</title><rect x="2.7441%" y="452" width="0.4843%" height="15" fill="rgb(231,73,38)" fg:x="238" fg:w="42"/><text x="2.9941%" y="462.50"></text></g><g><title>serialize_response (fastapi/routing.py:146) (11 samples, 0.13%)</title><rect x="3.2515%" y="436" width="0.1268%" height="15" fill="rgb(225,20,46)" fg:x="282" fg:w="11"/><text x="3.5015%" y="446.50"></text></g><g><title>run_in_threadpool (starlette/concurrency.py:41) (11 samples, 0.13%)</title><rect x="3.2515%" y="452" width="0.1268%" height="15" fill="rgb(210,31,41)" fg:x="282" fg:w="11"/><text x="3.5015%" y="462.50"></text></g><g><title>run_sync (anyio/to_thread.py:33) (10 samples, 0.12%)</title><rect x="3.2630%" y="468" width="0.1153%" height="15" fill="rgb(221,200,47)" fg:x="283" fg:w="10"/><text x="3.5130%" y="478.50"></text></g><g><title>app (fastapi/routing.py:303) (17 samples, 0.20%)</title><rect x="3.2284%" y="420" width="0.1960%" height="15" fill="rgb(226,26,5)" fg:x="280" fg:w="17"/><text x="3.4784%" y="430.50"></text></g><g><title>app (starlette/routing.py:66) (91 samples, 1.05%)</title><rect x="2.3982%" y="404" width="1.0492%" height="15" fill="rgb(249,33,26)" fg:x="208" fg:w="91"/><text x="2.6482%" y="414.50"></text></g><g><title>emit (logging/__init__.py:1100) (19 samples, 0.22%)</title><rect x="3.6089%" y="564" width="0.2191%" height="15" fill="rgb(235,183,28)" fg:x="313" fg:w="19"/><text x="3.8589%" y="574.50"></text></g><g><title>format (logging/__init__.py:943) (19 samples, 0.22%)</title><rect x="3.6089%" y="580" width="0.2191%" height="15" fill="rgb(221,5,38)" fg:x="313" fg:w="19"/><text x="3.8589%" y="590.50"></text></g><g><title>format (logging/__init__.py:681) (18 samples, 0.21%)</title><rect x="3.6204%" y="596" width="0.2075%" height="15" fill="rgb(247,18,42)" fg:x="314" fg:w="18"/><text x="3.8704%" y="606.50"></text></g><g><title>emit (logging/__init__.py:1103) (105 samples, 1.21%)</title><rect x="3.8280%" y="564" width="1.2107%" height="15" fill="rgb(241,131,45)" fg:x="332" fg:w="105"/><text x="4.0780%" y="574.50"></text></g><g><title>send (uvicorn/protocols/http/h11_impl.py:478) (133 samples, 1.53%)</title><rect x="3.5167%" y="468" width="1.5335%" height="15" fill="rgb(249,31,29)" fg:x="305" fg:w="133"/><text x="3.7667%" y="478.50"></text></g><g><title>info (logging/__init__.py:1477) (132 samples, 1.52%)</title><rect x="3.5282%" y="484" width="1.5220%" height="15" fill="rgb(225,111,53)" fg:x="306" fg:w="132"/><text x="3.7782%" y="494.50"></text></g><g><title>_log (logging/__init__.py:1624) (127 samples, 1.46%)</title><rect x="3.5858%" y="500" width="1.4643%" height="15" fill="rgb(238,160,17)" fg:x="311" fg:w="127"/><text x="3.8358%" y="510.50"></text></g><g><title>handle (logging/__init__.py:1634) (126 samples, 1.45%)</title><rect x="3.5974%" y="516" width="1.4528%" height="15" fill="rgb(214,148,48)" fg:x="312" fg:w="126"/><text x="3.8474%" y="526.50"></text></g><g><title>callHandlers (logging/__init__.py:1696) (125 samples, 1.44%)</title><rect x="3.6089%" y="532" width="1.4413%" height="15" fill="rgb(232,36,49)" fg:x="313" fg:w="125"/><text x="3.8589%" y="542.50"></text></g><g><title>handle (logging/__init__.py:968) (125 samples, 1.44%)</title><rect x="3.6089%" y="548" width="1.4413%" height="15" fill="rgb(209,103,24)" fg:x="313" fg:w="125"/><text x="3.8589%" y="558.50"></text></g><g><title>__call__ (starlette/responses.py:164) (254 samples, 2.93%)</title><rect x="3.4590%" y="420" width="2.9286%" height="15" fill="rgb(229,88,8)" fg:x="300" fg:w="254"/><text x="3.7090%" y="430.50">__..</text></g><g><title>sender (starlette/middleware/exceptions.py:65) (254 samples, 2.93%)</title><rect x="3.4590%" y="436" width="2.9286%" height="15" fill="rgb(213,181,19)" fg:x="300" fg:w="254"/><text x="3.7090%" y="446.50">se..</text></g><g><title>_send (starlette/middleware/errors.py:159) (254 samples, 2.93%)</title><rect x="3.4590%" y="452" width="2.9286%" height="15" fill="rgb(254,191,54)" fg:x="300" fg:w="254"/><text x="3.7090%" y="462.50">_s..</text></g><g><title>send (uvicorn/protocols/http/h11_impl.py:491) (100 samples, 1.15%)</title><rect x="5.2346%" y="468" width="1.1530%" height="15" fill="rgb(241,83,37)" fg:x="454" fg:w="100"/><text x="5.4846%" y="478.50"></text></g><g><title>write (asyncio/selector_events.py:916) (100 samples, 1.15%)</title><rect x="5.2346%" y="484" width="1.1530%" height="15" fill="rgb(233,36,39)" fg:x="454" fg:w="100"/><text x="5.4846%" y="494.50"></text></g><g><title>send (uvicorn/protocols/http/h11_impl.py:505) (9 samples, 0.10%)</title><rect x="6.3992%" y="468" width="0.1038%" height="15" fill="rgb(226,3,54)" fg:x="555" fg:w="9"/><text x="6.6492%" y="478.50"></text></g><g><title>send (uvicorn/protocols/http/h11_impl.py:506) (75 samples, 0.86%)</title><rect x="6.5029%" y="468" width="0.8648%" height="15" fill="rgb(245,192,40)" fg:x="564" fg:w="75"/><text x="6.7529%" y="478.50"></text></g><g><title>write (asyncio/selector_events.py:916) (75 samples, 0.86%)</title><rect x="6.5029%" y="484" width="0.8648%" height="15" fill="rgb(238,167,29)" fg:x="564" fg:w="75"/><text x="6.7529%" y="494.50"></text></g><g><title>__call__ (starlette/routing.py:718) (449 samples, 5.18%)</title><rect x="2.3406%" y="372" width="5.1770%" height="15" fill="rgb(232,182,51)" fg:x="203" fg:w="449"/><text x="2.5906%" y="382.50">__call..</text></g><g><title>handle (starlette/routing.py:276) (449 samples, 5.18%)</title><rect x="2.3406%" y="388" width="5.1770%" height="15" fill="rgb(231,60,39)" fg:x="203" fg:w="449"/><text x="2.5906%" y="398.50">handle..</text></g><g><title>app (starlette/routing.py:69) (353 samples, 4.07%)</title><rect x="3.4475%" y="404" width="4.0701%" height="15" fill="rgb(208,69,12)" fg:x="299" fg:w="353"/><text x="3.6975%" y="414.50">app ..</text></g><g><title>__call__ (starlette/responses.py:171) (98 samples, 1.13%)</title><rect x="6.3876%" y="420" width="1.1299%" height="15" fill="rgb(235,93,37)" fg:x="554" fg:w="98"/><text x="6.6376%" y="430.50"></text></g><g><title>sender (starlette/middleware/exceptions.py:65) (98 samples, 1.13%)</title><rect x="6.3876%" y="436" width="1.1299%" height="15" fill="rgb(213,116,39)" fg:x="554" fg:w="98"/><text x="6.6376%" y="446.50"></text></g><g><title>_send (starlette/middleware/errors.py:159) (98 samples, 1.13%)</title><rect x="6.3876%" y="452" width="1.1299%" height="15" fill="rgb(222,207,29)" fg:x="554" fg:w="98"/><text x="6.6376%" y="462.50"></text></g><g><title>run_asgi (uvicorn/protocols/http/h11_impl.py:408) (460 samples, 5.30%)</title><rect x="2.2368%" y="260" width="5.3038%" height="15" fill="rgb(206,96,30)" fg:x="194" fg:w="460"/><text x="2.4868%" y="270.50">run_as..</text></g><g><title>__call__ (uvicorn/middleware/proxy_headers.py:84) (460 samples, 5.30%)</title><rect x="2.2368%" y="276" width="5.3038%" height="15" fill="rgb(218,138,4)" fg:x="194" fg:w="460"/><text x="2.4868%" y="286.50">__call..</text></g><g><title>__call__ (fastapi/applications.py:289) (460 samples, 5.30%)</title><rect x="2.2368%" y="292" width="5.3038%" height="15" fill="rgb(250,191,14)" fg:x="194" fg:w="460"/><text x="2.4868%" y="302.50">__call..</text></g><g><title>__call__ (starlette/applications.py:122) (460 samples, 5.30%)</title><rect x="2.2368%" y="308" width="5.3038%" height="15" fill="rgb(239,60,40)" fg:x="194" fg:w="460"/><text x="2.4868%" y="318.50">__call..</text></g><g><title>__call__ (starlette/middleware/errors.py:162) (458 samples, 5.28%)</title><rect x="2.2599%" y="324" width="5.2808%" height="15" fill="rgb(206,27,48)" fg:x="196" fg:w="458"/><text x="2.5099%" y="334.50">__call..</text></g><g><title>__call__ (starlette/middleware/exceptions.py:68) (458 samples, 5.28%)</title><rect x="2.2599%" y="340" width="5.2808%" height="15" fill="rgb(225,35,8)" fg:x="196" fg:w="458"/><text x="2.5099%" y="350.50">__call..</text></g><g><title>__call__ (fastapi/middleware/asyncexitstack.py:17) (458 samples, 5.28%)</title><rect x="2.2599%" y="356" width="5.2808%" height="15" fill="rgb(250,213,24)" fg:x="196" fg:w="458"/><text x="2.5099%" y="366.50">__call..</text></g><g><title>_run_once (asyncio/base_events.py:1899) (646 samples, 7.45%)</title><rect x="0.1038%" y="228" width="7.4484%" height="15" fill="rgb(247,123,22)" fg:x="9" fg:w="646"/><text x="0.3538%" y="238.50">_run_once ..</text></g><g><title>_run (asyncio/events.py:80) (646 samples, 7.45%)</title><rect x="0.1038%" y="244" width="7.4484%" height="15" fill="rgb(231,138,38)" fg:x="9" fg:w="646"/><text x="0.3538%" y="254.50">_run (asyn..</text></g><g><title>&lt;module&gt; (&lt;string&gt;:1) (657 samples, 7.58%)</title><rect x="0.0000%" y="68" width="7.5752%" height="15" fill="rgb(231,145,46)" fg:x="0" fg:w="657"/><text x="0.2500%" y="78.50">&lt;module&gt; (..</text></g><g><title>spawn_main (multiprocessing/spawn.py:116) (657 samples, 7.58%)</title><rect x="0.0000%" y="84" width="7.5752%" height="15" fill="rgb(251,118,11)" fg:x="0" fg:w="657"/><text x="0.2500%" y="94.50">spawn_main..</text></g><g><title>_main (multiprocessing/spawn.py:129) (657 samples, 7.58%)</title><rect x="0.0000%" y="100" width="7.5752%" height="15" fill="rgb(217,147,25)" fg:x="0" fg:w="657"/><text x="0.2500%" y="110.50">_main (mul..</text></g><g><title>_bootstrap (multiprocessing/process.py:314) (657 samples, 7.58%)</title><rect x="0.0000%" y="116" width="7.5752%" height="15" fill="rgb(247,81,37)" fg:x="0" fg:w="657"/><text x="0.2500%" y="126.50">_bootstrap..</text></g><g><title>run (multiprocessing/process.py:108) (657 samples, 7.58%)</title><rect x="0.0000%" y="132" width="7.5752%" height="15" fill="rgb(209,12,38)" fg:x="0" fg:w="657"/><text x="0.2500%" y="142.50">run (multi..</text></g><g><title>subprocess_started (uvicorn/_subprocess.py:76) (657 samples, 7.58%)</title><rect x="0.0000%" y="148" width="7.5752%" height="15" fill="rgb(227,1,9)" fg:x="0" fg:w="657"/><text x="0.2500%" y="158.50">subprocess..</text></g><g><title>run (uvicorn/server.py:61) (657 samples, 7.58%)</title><rect x="0.0000%" y="164" width="7.5752%" height="15" fill="rgb(248,47,43)" fg:x="0" fg:w="657"/><text x="0.2500%" y="174.50">run (uvico..</text></g><g><title>run (asyncio/runners.py:44) (657 samples, 7.58%)</title><rect x="0.0000%" y="180" width="7.5752%" height="15" fill="rgb(221,10,30)" fg:x="0" fg:w="657"/><text x="0.2500%" y="190.50">run (async..</text></g><g><title>run_until_complete (asyncio/base_events.py:636) (657 samples, 7.58%)</title><rect x="0.0000%" y="196" width="7.5752%" height="15" fill="rgb(210,229,1)" fg:x="0" fg:w="657"/><text x="0.2500%" y="206.50">run_until_..</text></g><g><title>run_forever (asyncio/base_events.py:603) (657 samples, 7.58%)</title><rect x="0.0000%" y="212" width="7.5752%" height="15" fill="rgb(222,148,37)" fg:x="0" fg:w="657"/><text x="0.2500%" y="222.50">run_foreve..</text></g><g><title>load (joblib/numpy_pickle.py:650) (246 samples, 2.84%)</title><rect x="7.6444%" y="132" width="2.8364%" height="15" fill="rgb(234,67,33)" fg:x="663" fg:w="246"/><text x="7.8944%" y="142.50">lo..</text></g><g><title>__enter__ (contextlib.py:135) (45 samples, 0.52%)</title><rect x="10.4923%" y="148" width="0.5189%" height="15" fill="rgb(247,98,35)" fg:x="910" fg:w="45"/><text x="10.7423%" y="158.50"></text></g><g><title>_read_fileobject (joblib/numpy_pickle_utils.py:149) (45 samples, 0.52%)</title><rect x="10.4923%" y="164" width="0.5189%" height="15" fill="rgb(247,138,52)" fg:x="910" fg:w="45"/><text x="10.7423%" y="174.50"></text></g><g><title>_detect_compressor (joblib/numpy_pickle_utils.py:94) (45 samples, 0.52%)</title><rect x="10.4923%" y="180" width="0.5189%" height="15" fill="rgb(213,79,30)" fg:x="910" fg:w="45"/><text x="10.7423%" y="190.50"></text></g><g><title>load (joblib/numpy_pickle.py:651) (47 samples, 0.54%)</title><rect x="10.4808%" y="132" width="0.5419%" height="15" fill="rgb(246,177,23)" fg:x="909" fg:w="47"/><text x="10.7308%" y="142.50"></text></g><g><title>load (pickle.py:1208) (11 samples, 0.13%)</title><rect x="11.2533%" y="164" width="0.1268%" height="15" fill="rgb(230,62,27)" fg:x="976" fg:w="11"/><text x="11.5033%" y="174.50"></text></g><g><title>read (pickle.py:288) (49 samples, 0.56%)</title><rect x="12.6139%" y="180" width="0.5650%" height="15" fill="rgb(216,154,8)" fg:x="1094" fg:w="49"/><text x="12.8639%" y="190.50"></text></g><g><title>read (pickle.py:289) (113 samples, 1.30%)</title><rect x="13.1788%" y="180" width="1.3029%" height="15" fill="rgb(244,35,45)" fg:x="1143" fg:w="113"/><text x="13.4288%" y="190.50"></text></g><g><title>read (pickle.py:290) (25 samples, 0.29%)</title><rect x="14.4817%" y="180" width="0.2883%" height="15" fill="rgb(251,115,12)" fg:x="1256" fg:w="25"/><text x="14.7317%" y="190.50"></text></g><g><title>read (pickle.py:292) (98 samples, 1.13%)</title><rect x="14.8161%" y="180" width="1.1299%" height="15" fill="rgb(240,54,50)" fg:x="1285" fg:w="98"/><text x="15.0661%" y="190.50"></text></g><g><title>read (pickle.py:293) (95 samples, 1.10%)</title><rect x="15.9460%" y="180" width="1.0954%" height="15" fill="rgb(233,84,52)" fg:x="1383" fg:w="95"/><text x="16.1960%" y="190.50"></text></g><g><title>load (pickle.py:1209) (511 samples, 5.89%)</title><rect x="11.3801%" y="164" width="5.8918%" height="15" fill="rgb(207,117,47)" fg:x="987" fg:w="511"/><text x="11.6301%" y="174.50">load (p..</text></g><g><title>read (pickle.py:296) (20 samples, 0.23%)</title><rect x="17.0414%" y="180" width="0.2306%" height="15" fill="rgb(249,43,39)" fg:x="1478" fg:w="20"/><text x="17.2914%" y="190.50"></text></g><g><title>load (pickle.py:1210) (25 samples, 0.29%)</title><rect x="17.2720%" y="164" width="0.2883%" height="15" fill="rgb(209,38,44)" fg:x="1498" fg:w="25"/><text x="17.5220%" y="174.50"></text></g><g><title>load (pickle.py:1212) (112 samples, 1.29%)</title><rect x="17.5602%" y="164" width="1.2914%" height="15" fill="rgb(236,212,23)" fg:x="1523" fg:w="112"/><text x="17.8102%" y="174.50"></text></g><g><title>load_binfloat (pickle.py:1319) (17 samples, 0.20%)</title><rect x="21.0423%" y="180" width="0.1960%" height="15" fill="rgb(242,79,21)" fg:x="1825" fg:w="17"/><text x="21.2923%" y="190.50"></text></g><g><title>read (pickle.py:288) (21 samples, 0.24%)</title><rect x="22.2299%" y="196" width="0.2421%" height="15" fill="rgb(211,96,35)" fg:x="1928" fg:w="21"/><text x="22.4799%" y="206.50"></text></g><g><title>read (pickle.py:289) (40 samples, 0.46%)</title><rect x="22.4720%" y="196" width="0.4612%" height="15" fill="rgb(253,215,40)" fg:x="1949" fg:w="40"/><text x="22.7220%" y="206.50"></text></g><g><title>read (pickle.py:290) (13 samples, 0.15%)</title><rect x="22.9332%" y="196" width="0.1499%" height="15" fill="rgb(211,81,21)" fg:x="1989" fg:w="13"/><text x="23.1832%" y="206.50"></text></g><g><title>read (pickle.py:293) (35 samples, 0.40%)</title><rect x="23.0831%" y="196" width="0.4036%" height="15" fill="rgb(208,190,38)" fg:x="2002" fg:w="35"/><text x="23.3331%" y="206.50"></text></g><g><title>load_binget (pickle.py:1618) (201 samples, 2.32%)</title><rect x="21.2383%" y="180" width="2.3175%" height="15" fill="rgb(235,213,38)" fg:x="1842" fg:w="201"/><text x="21.4883%" y="190.50">l..</text></g><g><title>load_binget (pickle.py:1620) (77 samples, 0.89%)</title><rect x="23.5905%" y="180" width="0.8878%" height="15" fill="rgb(237,122,38)" fg:x="2046" fg:w="77"/><text x="23.8405%" y="190.50"></text></g><g><title>load_binint1 (pickle.py:1285) (68 samples, 0.78%)</title><rect x="24.5359%" y="180" width="0.7840%" height="15" fill="rgb(244,218,35)" fg:x="2128" fg:w="68"/><text x="24.7859%" y="190.50"></text></g><g><title>read (pickle.py:293) (13 samples, 0.15%)</title><rect x="25.1701%" y="196" width="0.1499%" height="15" fill="rgb(240,68,47)" fg:x="2183" fg:w="13"/><text x="25.4201%" y="206.50"></text></g><g><title>__setstate__ (sklearn/base.py:355) (20 samples, 0.23%)</title><rect x="26.2885%" y="212" width="0.2306%" height="15" fill="rgb(210,16,53)" fg:x="2280" fg:w="20"/><text x="26.5385%" y="222.50"></text></g><g><title>load_build (pickle.py:1718) (89 samples, 1.03%)</title><rect x="25.6197%" y="196" width="1.0262%" height="15" fill="rgb(235,124,12)" fg:x="2222" fg:w="89"/><text x="25.8697%" y="206.50"></text></g><g><title>__setstate__ (sklearn/base.py:357) (10 samples, 0.12%)</title><rect x="26.5306%" y="212" width="0.1153%" height="15" fill="rgb(224,169,11)" fg:x="2301" fg:w="10"/><text x="26.7806%" y="222.50"></text></g><g><title>load_build (pickle.py:1726) (43 samples, 0.50%)</title><rect x="26.8765%" y="196" width="0.4958%" height="15" fill="rgb(250,166,2)" fg:x="2331" fg:w="43"/><text x="27.1265%" y="206.50"></text></g><g><title>load_build (pickle.py:1727) (15 samples, 0.17%)</title><rect x="27.3723%" y="196" width="0.1730%" height="15" fill="rgb(242,216,29)" fg:x="2374" fg:w="15"/><text x="27.6223%" y="206.50"></text></g><g><title>load_build (joblib/numpy_pickle.py:402) (227 samples, 2.62%)</title><rect x="25.3200%" y="180" width="2.6173%" height="15" fill="rgb(230,116,27)" fg:x="2196" fg:w="227"/><text x="25.5700%" y="190.50">lo..</text></g><g><title>load_build (pickle.py:1728) (34 samples, 0.39%)</title><rect x="27.5453%" y="196" width="0.3920%" height="15" fill="rgb(228,99,48)" fg:x="2389" fg:w="34"/><text x="27.7953%" y="206.50"></text></g><g><title>load_build (joblib/numpy_pickle.py:405) (12 samples, 0.14%)</title><rect x="27.9373%" y="180" width="0.1384%" height="15" fill="rgb(253,11,6)" fg:x="2423" fg:w="12"/><text x="28.1873%" y="190.50"></text></g><g><title>read_array (joblib/numpy_pickle.py:142) (10 samples, 0.12%)</title><rect x="28.5253%" y="212" width="0.1153%" height="15" fill="rgb(247,143,39)" fg:x="2474" fg:w="10"/><text x="28.7753%" y="222.50"></text></g><g><title>read_array (joblib/numpy_pickle.py:147) (120 samples, 1.38%)</title><rect x="28.6406%" y="212" width="1.3836%" height="15" fill="rgb(236,97,10)" fg:x="2484" fg:w="120"/><text x="28.8906%" y="222.50"></text></g><g><title>&lt;listcomp&gt; (joblib/numpy_pickle.py:147) (75 samples, 0.86%)</title><rect x="29.1595%" y="228" width="0.8648%" height="15" fill="rgb(233,208,19)" fg:x="2529" fg:w="75"/><text x="29.4095%" y="238.50"></text></g><g><title>read_array (joblib/numpy_pickle.py:148) (192 samples, 2.21%)</title><rect x="30.0242%" y="212" width="2.2138%" height="15" fill="rgb(216,164,2)" fg:x="2604" fg:w="192"/><text x="30.2742%" y="222.50">r..</text></g><g><title>read_array (joblib/numpy_pickle.py:155) (12 samples, 0.14%)</title><rect x="32.3302%" y="212" width="0.1384%" height="15" fill="rgb(220,129,5)" fg:x="2804" fg:w="12"/><text x="32.5802%" y="222.50"></text></g><g><title>read_array (joblib/numpy_pickle.py:158) (11 samples, 0.13%)</title><rect x="32.5608%" y="212" width="0.1268%" height="15" fill="rgb(242,17,10)" fg:x="2824" fg:w="11"/><text x="32.8108%" y="222.50"></text></g><g><title>read_array (joblib/numpy_pickle.py:170) (10 samples, 0.12%)</title><rect x="32.7799%" y="212" width="0.1153%" height="15" fill="rgb(242,107,0)" fg:x="2843" fg:w="10"/><text x="33.0299%" y="222.50"></text></g><g><title>read_array (joblib/numpy_pickle.py:173) (35 samples, 0.40%)</title><rect x="32.9298%" y="212" width="0.4036%" height="15" fill="rgb(251,28,31)" fg:x="2856" fg:w="35"/><text x="33.1798%" y="222.50"></text></g><g><title>read_array (joblib/numpy_pickle.py:174) (17 samples, 0.20%)</title><rect x="33.3333%" y="212" width="0.1960%" height="15" fill="rgb(233,223,10)" fg:x="2891" fg:w="17"/><text x="33.5833%" y="222.50"></text></g><g><title>read_array (joblib/numpy_pickle.py:175) (25 samples, 0.29%)</title><rect x="33.5293%" y="212" width="0.2883%" height="15" fill="rgb(215,21,27)" fg:x="2908" fg:w="25"/><text x="33.7793%" y="222.50"></text></g><g><title>read_array (joblib/numpy_pickle.py:176) (12 samples, 0.14%)</title><rect x="33.8176%" y="212" width="0.1384%" height="15" fill="rgb(232,23,21)" fg:x="2933" fg:w="12"/><text x="34.0676%" y="222.50"></text></g><g><title>_read_bytes (joblib/numpy_pickle_utils.py:243) (1,467 samples, 16.91%)</title><rect x="34.1058%" y="228" width="16.9146%" height="15" fill="rgb(244,5,23)" fg:x="2958" fg:w="1467"/><text x="34.3558%" y="238.50">_read_bytes (joblib/numpy_..</text></g><g><title>read_array (joblib/numpy_pickle.py:177) (1,491 samples, 17.19%)</title><rect x="33.9560%" y="212" width="17.1913%" height="15" fill="rgb(226,81,46)" fg:x="2945" fg:w="1491"/><text x="34.2060%" y="222.50">read_array (joblib/numpy_pi..</text></g><g><title>read_array (joblib/numpy_pickle.py:179) (1,631 samples, 18.81%)</title><rect x="51.1588%" y="212" width="18.8055%" height="15" fill="rgb(247,70,30)" fg:x="4437" fg:w="1631"/><text x="51.4088%" y="222.50">read_array (joblib/numpy_pick..</text></g><g><title>read_array (joblib/numpy_pickle.py:180) (45 samples, 0.52%)</title><rect x="69.9643%" y="212" width="0.5189%" height="15" fill="rgb(212,68,19)" fg:x="6068" fg:w="45"/><text x="70.2143%" y="222.50"></text></g><g><title>read_array (joblib/numpy_pickle.py:182) (42 samples, 0.48%)</title><rect x="70.4831%" y="212" width="0.4843%" height="15" fill="rgb(240,187,13)" fg:x="6113" fg:w="42"/><text x="70.7331%" y="222.50"></text></g><g><title>read_array (joblib/numpy_pickle.py:184) (11 samples, 0.13%)</title><rect x="70.9674%" y="212" width="0.1268%" height="15" fill="rgb(223,113,26)" fg:x="6155" fg:w="11"/><text x="71.2174%" y="222.50"></text></g><g><title>read_array (joblib/numpy_pickle.py:188) (16 samples, 0.18%)</title><rect x="71.0942%" y="212" width="0.1845%" height="15" fill="rgb(206,192,2)" fg:x="6166" fg:w="16"/><text x="71.3442%" y="222.50"></text></g><g><title>_is_numpy_array_byte_order_mismatch (joblib/numpy_pickle_utils.py:54) (12 samples, 0.14%)</title><rect x="71.4747%" y="244" width="0.1384%" height="15" fill="rgb(241,108,4)" fg:x="6199" fg:w="12"/><text x="71.7247%" y="254.50"></text></g><g><title>_is_numpy_array_byte_order_mismatch (joblib/numpy_pickle_utils.py:62) (15 samples, 0.17%)</title><rect x="71.7514%" y="244" width="0.1730%" height="15" fill="rgb(247,173,49)" fg:x="6223" fg:w="15"/><text x="72.0014%" y="254.50"></text></g><g><title>_ensure_native_byte_order (joblib/numpy_pickle_utils.py:71) (61 samples, 0.70%)</title><rect x="71.3479%" y="228" width="0.7033%" height="15" fill="rgb(224,114,35)" fg:x="6188" fg:w="61"/><text x="71.5979%" y="238.50"></text></g><g><title>_is_numpy_array_byte_order_mismatch (joblib/numpy_pickle_utils.py:63) (11 samples, 0.13%)</title><rect x="71.9244%" y="244" width="0.1268%" height="15" fill="rgb(245,159,27)" fg:x="6238" fg:w="11"/><text x="72.1744%" y="254.50"></text></g><g><title>read (joblib/numpy_pickle.py:252) (3,795 samples, 43.76%)</title><rect x="28.3062%" y="196" width="43.7565%" height="15" fill="rgb(245,172,44)" fg:x="2455" fg:w="3795"/><text x="28.5562%" y="206.50">read (joblib/numpy_pickle.py:252)</text></g><g><title>read_array (joblib/numpy_pickle.py:191) (68 samples, 0.78%)</title><rect x="71.2787%" y="212" width="0.7840%" height="15" fill="rgb(236,23,11)" fg:x="6182" fg:w="68"/><text x="71.5287%" y="222.50"></text></g><g><title>read (joblib/numpy_pickle.py:255) (14 samples, 0.16%)</title><rect x="72.0627%" y="196" width="0.1614%" height="15" fill="rgb(205,117,38)" fg:x="6250" fg:w="14"/><text x="72.3127%" y="206.50"></text></g><g><title>read (joblib/numpy_pickle.py:256) (13 samples, 0.15%)</title><rect x="72.2241%" y="196" width="0.1499%" height="15" fill="rgb(237,72,25)" fg:x="6264" fg:w="13"/><text x="72.4741%" y="206.50"></text></g><g><title>load_build (joblib/numpy_pickle.py:415) (3,840 samples, 44.28%)</title><rect x="28.1333%" y="180" width="44.2753%" height="15" fill="rgb(244,70,9)" fg:x="2440" fg:w="3840"/><text x="28.3833%" y="190.50">load_build (joblib/numpy_pickle.py:415)</text></g><g><title>load_empty_dictionary (pickle.py:1456) (11 samples, 0.13%)</title><rect x="72.4086%" y="180" width="0.1268%" height="15" fill="rgb(217,125,39)" fg:x="6280" fg:w="11"/><text x="72.6586%" y="190.50"></text></g><g><title>load_frame (pickle.py:1237) (21 samples, 0.24%)</title><rect x="72.5931%" y="180" width="0.2421%" height="15" fill="rgb(235,36,10)" fg:x="6296" fg:w="21"/><text x="72.8431%" y="190.50"></text></g><g><title>load_frame (pickle.py:1240) (467 samples, 5.38%)</title><rect x="72.8583%" y="180" width="5.3845%" height="15" fill="rgb(251,123,47)" fg:x="6319" fg:w="467"/><text x="73.1083%" y="190.50">load_fr..</text></g><g><title>load_frame (pickle.py:317) (459 samples, 5.29%)</title><rect x="72.9505%" y="196" width="5.2923%" height="15" fill="rgb(221,13,13)" fg:x="6327" fg:w="459"/><text x="73.2005%" y="206.50">load_f..</text></g><g><title>load_mark (pickle.py:1739) (12 samples, 0.14%)</title><rect x="78.3235%" y="180" width="0.1384%" height="15" fill="rgb(238,131,9)" fg:x="6793" fg:w="12"/><text x="78.5735%" y="190.50"></text></g><g><title>load_memoize (pickle.py:1658) (41 samples, 0.47%)</title><rect x="78.5426%" y="180" width="0.4727%" height="15" fill="rgb(211,50,8)" fg:x="6812" fg:w="41"/><text x="78.7926%" y="190.50"></text></g><g><title>load_newobj (pickle.py:1514) (23 samples, 0.27%)</title><rect x="79.0845%" y="180" width="0.2652%" height="15" fill="rgb(245,182,24)" fg:x="6859" fg:w="23"/><text x="79.3345%" y="190.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:72) (12 samples, 0.14%)</title><rect x="79.9839%" y="212" width="0.1384%" height="15" fill="rgb(242,14,37)" fg:x="6937" fg:w="12"/><text x="80.2339%" y="222.50"></text></g><g><title>load_reduce (pickle.py:1590) (100 samples, 1.15%)</title><rect x="79.4189%" y="180" width="1.1530%" height="15" fill="rgb(246,228,12)" fg:x="6888" fg:w="100"/><text x="79.6689%" y="190.50"></text></g><g><title>max (numpy/core/fromnumeric.py:2810) (62 samples, 0.71%)</title><rect x="79.8570%" y="196" width="0.7149%" height="15" fill="rgb(213,55,15)" fg:x="6926" fg:w="62"/><text x="80.1070%" y="206.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:88) (38 samples, 0.44%)</title><rect x="80.1337%" y="212" width="0.4381%" height="15" fill="rgb(209,9,3)" fg:x="6950" fg:w="38"/><text x="80.3837%" y="222.50"></text></g><g><title>pop_mark (pickle.py:1220) (9 samples, 0.10%)</title><rect x="80.6757%" y="196" width="0.1038%" height="15" fill="rgb(230,59,30)" fg:x="6997" fg:w="9"/><text x="80.9257%" y="206.50"></text></g><g><title>load_setitems (pickle.py:1695) (27 samples, 0.31%)</title><rect x="80.5719%" y="180" width="0.3113%" height="15" fill="rgb(209,121,21)" fg:x="6988" fg:w="27"/><text x="80.8219%" y="190.50"></text></g><g><title>pop_mark (pickle.py:1221) (9 samples, 0.10%)</title><rect x="80.7794%" y="196" width="0.1038%" height="15" fill="rgb(220,109,13)" fg:x="7006" fg:w="9"/><text x="81.0294%" y="206.50"></text></g><g><title>load_setitems (pickle.py:1697) (31 samples, 0.36%)</title><rect x="80.9063%" y="180" width="0.3574%" height="15" fill="rgb(232,18,1)" fg:x="7017" fg:w="31"/><text x="81.1563%" y="190.50"></text></g><g><title>load_setitems (pickle.py:1698) (55 samples, 0.63%)</title><rect x="81.2637%" y="180" width="0.6342%" height="15" fill="rgb(215,41,42)" fg:x="7048" fg:w="55"/><text x="81.5137%" y="190.50"></text></g><g><title>load_tuple1 (pickle.py:1440) (9 samples, 0.10%)</title><rect x="82.0939%" y="180" width="0.1038%" height="15" fill="rgb(224,123,36)" fg:x="7120" fg:w="9"/><text x="82.3439%" y="190.50"></text></g><g><title>predict (iris_app.py:28) (6,483 samples, 74.75%)</title><rect x="7.6444%" y="116" width="74.7492%" height="15" fill="rgb(240,125,3)" fg:x="663" fg:w="6483"/><text x="7.8944%" y="126.50">predict (iris_app.py:28)</text></g><g><title>load (joblib/numpy_pickle.py:658) (6,190 samples, 71.37%)</title><rect x="11.0227%" y="132" width="71.3709%" height="15" fill="rgb(205,98,50)" fg:x="956" fg:w="6190"/><text x="11.2727%" y="142.50">load (joblib/numpy_pickle.py:658)</text></g><g><title>_unpickle (joblib/numpy_pickle.py:577) (6,170 samples, 71.14%)</title><rect x="11.2533%" y="148" width="71.1403%" height="15" fill="rgb(205,185,37)" fg:x="976" fg:w="6170"/><text x="11.5033%" y="158.50">_unpickle (joblib/numpy_pickle.py:577)</text></g><g><title>load (pickle.py:1213) (5,511 samples, 63.54%)</title><rect x="18.8516%" y="164" width="63.5420%" height="15" fill="rgb(238,207,15)" fg:x="1635" fg:w="5511"/><text x="19.1016%" y="174.50">load (pickle.py:1213)</text></g><g><title>load_tuple3 (pickle.py:1448) (12 samples, 0.14%)</title><rect x="82.2553%" y="180" width="0.1384%" height="15" fill="rgb(213,199,42)" fg:x="7134" fg:w="12"/><text x="82.5053%" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py:906) (17 samples, 0.20%)</title><rect x="82.4628%" y="196" width="0.1960%" height="15" fill="rgb(235,201,11)" fg:x="7152" fg:w="17"/><text x="82.7128%" y="206.50"></text></g><g><title>isdtype (sklearn/utils/_array_api.py:283) (17 samples, 0.20%)</title><rect x="82.4628%" y="212" width="0.1960%" height="15" fill="rgb(207,46,11)" fg:x="7152" fg:w="17"/><text x="82.7128%" y="222.50"></text></g><g><title>isdtype (sklearn/utils/_array_api.py:84) (17 samples, 0.20%)</title><rect x="82.4628%" y="228" width="0.1960%" height="15" fill="rgb(241,35,35)" fg:x="7152" fg:w="17"/><text x="82.7128%" y="238.50"></text></g><g><title>_isdtype_single (sklearn/utils/_array_api.py:96) (16 samples, 0.18%)</title><rect x="82.4743%" y="244" width="0.1845%" height="15" fill="rgb(243,32,47)" fg:x="7153" fg:w="16"/><text x="82.7243%" y="254.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/utils/_array_api.py:96) (16 samples, 0.18%)</title><rect x="82.4743%" y="260" width="0.1845%" height="15" fill="rgb(247,202,23)" fg:x="7153" fg:w="16"/><text x="82.7243%" y="270.50"></text></g><g><title>_isdtype_single (sklearn/utils/_array_api.py:92) (16 samples, 0.18%)</title><rect x="82.4743%" y="276" width="0.1845%" height="15" fill="rgb(219,102,11)" fg:x="7153" fg:w="16"/><text x="82.7243%" y="286.50"></text></g><g><title>predict_proba (sklearn/ensemble/_forest.py:865) (32 samples, 0.37%)</title><rect x="82.4282%" y="148" width="0.3690%" height="15" fill="rgb(243,110,44)" fg:x="7149" fg:w="32"/><text x="82.6782%" y="158.50"></text></g><g><title>_validate_X_predict (sklearn/ensemble/_forest.py:599) (32 samples, 0.37%)</title><rect x="82.4282%" y="164" width="0.3690%" height="15" fill="rgb(222,74,54)" fg:x="7149" fg:w="32"/><text x="82.6782%" y="174.50"></text></g><g><title>_validate_data (sklearn/base.py:604) (31 samples, 0.36%)</title><rect x="82.4398%" y="180" width="0.3574%" height="15" fill="rgb(216,99,12)" fg:x="7150" fg:w="31"/><text x="82.6898%" y="190.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/ensemble/_forest.py:876) (33 samples, 0.38%)</title><rect x="83.1200%" y="228" width="0.3805%" height="15" fill="rgb(226,22,26)" fg:x="7209" fg:w="33"/><text x="83.3700%" y="238.50"></text></g><g><title>delayed_function (sklearn/utils/parallel.py:97) (32 samples, 0.37%)</title><rect x="83.1316%" y="244" width="0.3690%" height="15" fill="rgb(217,163,10)" fg:x="7210" fg:w="32"/><text x="83.3816%" y="254.50"></text></g><g><title>__init__ (sklearn/utils/parallel.py:107) (28 samples, 0.32%)</title><rect x="83.1777%" y="260" width="0.3228%" height="15" fill="rgb(213,25,53)" fg:x="7214" fg:w="28"/><text x="83.4277%" y="270.50"></text></g><g><title>_get_sequential_output (joblib/parallel.py:1781) (74 samples, 0.85%)</title><rect x="82.9817%" y="196" width="0.8532%" height="15" fill="rgb(252,105,26)" fg:x="7197" fg:w="74"/><text x="83.2317%" y="206.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/utils/parallel.py:63) (63 samples, 0.73%)</title><rect x="83.1085%" y="212" width="0.7264%" height="15" fill="rgb(220,39,43)" fg:x="7208" fg:w="63"/><text x="83.3585%" y="222.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/ensemble/_forest.py:877) (29 samples, 0.33%)</title><rect x="83.5005%" y="228" width="0.3344%" height="15" fill="rgb(229,68,48)" fg:x="7242" fg:w="29"/><text x="83.7505%" y="238.50"></text></g><g><title>delayed (sklearn/utils/parallel.py:96) (22 samples, 0.25%)</title><rect x="83.5812%" y="244" width="0.2537%" height="15" fill="rgb(252,8,32)" fg:x="7249" fg:w="22"/><text x="83.8312%" y="254.50"></text></g><g><title>set_config (sklearn/_config.py:184) (24 samples, 0.28%)</title><rect x="84.3653%" y="260" width="0.2767%" height="15" fill="rgb(223,20,43)" fg:x="7317" fg:w="24"/><text x="84.6153%" y="270.50"></text></g><g><title>__enter__ (contextlib.py:135) (50 samples, 0.58%)</title><rect x="84.1116%" y="228" width="0.5765%" height="15" fill="rgb(229,81,49)" fg:x="7295" fg:w="50"/><text x="84.3616%" y="238.50"></text></g><g><title>config_context (sklearn/_config.py:339) (42 samples, 0.48%)</title><rect x="84.2039%" y="244" width="0.4843%" height="15" fill="rgb(236,28,36)" fg:x="7303" fg:w="42"/><text x="84.4539%" y="254.50"></text></g><g><title>set_config (sklearn/_config.py:184) (22 samples, 0.25%)</title><rect x="84.9072%" y="260" width="0.2537%" height="15" fill="rgb(249,185,26)" fg:x="7364" fg:w="22"/><text x="85.1572%" y="270.50"></text></g><g><title>__exit__ (contextlib.py:142) (48 samples, 0.55%)</title><rect x="84.6881%" y="228" width="0.5534%" height="15" fill="rgb(249,174,33)" fg:x="7345" fg:w="48"/><text x="84.9381%" y="238.50"></text></g><g><title>config_context (sklearn/_config.py:355) (44 samples, 0.51%)</title><rect x="84.7342%" y="244" width="0.5073%" height="15" fill="rgb(233,201,37)" fg:x="7349" fg:w="44"/><text x="84.9842%" y="254.50"></text></g><g><title>__call__ (sklearn/utils/parallel.py:126) (126 samples, 1.45%)</title><rect x="83.9387%" y="212" width="1.4528%" height="15" fill="rgb(221,78,26)" fg:x="7280" fg:w="126"/><text x="84.1887%" y="222.50"></text></g><g><title>helper (contextlib.py:281) (13 samples, 0.15%)</title><rect x="85.2416%" y="228" width="0.1499%" height="15" fill="rgb(250,127,30)" fg:x="7393" fg:w="13"/><text x="85.4916%" y="238.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:1399) (11 samples, 0.13%)</title><rect x="85.7950%" y="292" width="0.1268%" height="15" fill="rgb(230,49,44)" fg:x="7441" fg:w="11"/><text x="86.0450%" y="302.50"></text></g><g><title>_is_fitted (sklearn/utils/validation.py:1399) (47 samples, 0.54%)</title><rect x="85.7489%" y="276" width="0.5419%" height="15" fill="rgb(229,67,23)" fg:x="7437" fg:w="47"/><text x="85.9989%" y="286.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:1400) (32 samples, 0.37%)</title><rect x="85.9218%" y="292" width="0.3690%" height="15" fill="rgb(249,83,47)" fg:x="7452" fg:w="32"/><text x="86.1718%" y="302.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:991) (64 samples, 0.74%)</title><rect x="85.5990%" y="244" width="0.7379%" height="15" fill="rgb(215,43,3)" fg:x="7424" fg:w="64"/><text x="85.8490%" y="254.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:1461) (58 samples, 0.67%)</title><rect x="85.6682%" y="260" width="0.6687%" height="15" fill="rgb(238,154,13)" fg:x="7430" fg:w="58"/><text x="85.9182%" y="270.50"></text></g><g><title>_num_features (sklearn/utils/validation.py:301) (9 samples, 0.10%)</title><rect x="86.5099%" y="292" width="0.1038%" height="15" fill="rgb(219,56,2)" fg:x="7503" fg:w="9"/><text x="86.7599%" y="302.50"></text></g><g><title>_check_n_features (sklearn/base.py:391) (29 samples, 0.33%)</title><rect x="86.4407%" y="276" width="0.3344%" height="15" fill="rgb(233,0,4)" fg:x="7497" fg:w="29"/><text x="86.6907%" y="286.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:992) (44 samples, 0.51%)</title><rect x="86.3369%" y="244" width="0.5073%" height="15" fill="rgb(235,30,7)" fg:x="7488" fg:w="44"/><text x="86.5869%" y="254.50"></text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py:473) (38 samples, 0.44%)</title><rect x="86.4061%" y="260" width="0.4381%" height="15" fill="rgb(250,79,13)" fg:x="7494" fg:w="38"/><text x="86.6561%" y="270.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:993) (752 samples, 8.67%)</title><rect x="86.8442%" y="244" width="8.6706%" height="15" fill="rgb(211,146,34)" fg:x="7532" fg:w="752"/><text x="87.0942%" y="254.50">predict_prob..</text></g><g><title>predict_proba (sklearn/tree/_classes.py:997) (50 samples, 0.58%)</title><rect x="95.5955%" y="244" width="0.5765%" height="15" fill="rgb(228,22,38)" fg:x="8291" fg:w="50"/><text x="95.8455%" y="254.50"></text></g><g><title>_sum (numpy/core/_methods.py:49) (44 samples, 0.51%)</title><rect x="95.6647%" y="260" width="0.5073%" height="15" fill="rgb(235,168,5)" fg:x="8297" fg:w="44"/><text x="95.9147%" y="270.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:998) (27 samples, 0.31%)</title><rect x="96.1720%" y="244" width="0.3113%" height="15" fill="rgb(221,155,16)" fg:x="8341" fg:w="27"/><text x="96.4220%" y="254.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:647) (980 samples, 11.30%)</title><rect x="85.4722%" y="228" width="11.2994%" height="15" fill="rgb(215,215,53)" fg:x="7413" fg:w="980"/><text x="85.7222%" y="238.50">_accumulate_predi..</text></g><g><title>predict_proba (sklearn/tree/_classes.py:999) (25 samples, 0.29%)</title><rect x="96.4833%" y="244" width="0.2883%" height="15" fill="rgb(223,4,10)" fg:x="8368" fg:w="25"/><text x="96.7333%" y="254.50"></text></g><g><title>_get_sequential_output (joblib/parallel.py:1784) (1,129 samples, 13.02%)</title><rect x="83.8925%" y="196" width="13.0174%" height="15" fill="rgb(234,103,6)" fg:x="7276" fg:w="1129"/><text x="84.1425%" y="206.50">_get_sequential_outp..</text></g><g><title>__call__ (sklearn/utils/parallel.py:127) (999 samples, 11.52%)</title><rect x="85.3914%" y="212" width="11.5185%" height="15" fill="rgb(227,97,0)" fg:x="7406" fg:w="999"/><text x="85.6414%" y="222.50">__call__ (sklearn..</text></g><g><title>__call__ (sklearn/utils/parallel.py:65) (1,216 samples, 14.02%)</title><rect x="82.9125%" y="164" width="14.0205%" height="15" fill="rgb(234,150,53)" fg:x="7191" fg:w="1216"/><text x="83.1625%" y="174.50">__call__ (sklearn/uti..</text></g><g><title>__call__ (joblib/parallel.py:1855) (1,212 samples, 13.97%)</title><rect x="82.9586%" y="180" width="13.9744%" height="15" fill="rgb(228,201,54)" fg:x="7195" fg:w="1212"/><text x="83.2086%" y="190.50">__call__ (joblib/para..</text></g><g><title>predict_proba (sklearn/ensemble/_forest.py:876) (1,260 samples, 14.53%)</title><rect x="82.9010%" y="148" width="14.5278%" height="15" fill="rgb(222,22,37)" fg:x="7190" fg:w="1260"/><text x="83.1510%" y="158.50">predict_proba (sklearn..</text></g><g><title>__init__ (joblib/parallel.py:1307) (38 samples, 0.44%)</title><rect x="96.9907%" y="164" width="0.4381%" height="15" fill="rgb(237,53,32)" fg:x="8412" fg:w="38"/><text x="97.2407%" y="174.50"></text></g><g><title>uuid4 (uuid.py:715) (38 samples, 0.44%)</title><rect x="96.9907%" y="180" width="0.4381%" height="15" fill="rgb(233,25,53)" fg:x="8412" fg:w="38"/><text x="97.2407%" y="190.50"></text></g><g><title>predict (sklearn/ensemble/_forest.py:823) (1,306 samples, 15.06%)</title><rect x="82.3936%" y="132" width="15.0582%" height="15" fill="rgb(210,40,34)" fg:x="7146" fg:w="1306"/><text x="82.6436%" y="142.50">predict (sklearn/ensemb..</text></g><g><title>predict (iris_app.py:29) (1,340 samples, 15.45%)</title><rect x="82.3936%" y="116" width="15.4502%" height="15" fill="rgb(241,220,44)" fg:x="7146" fg:w="1340"/><text x="82.6436%" y="126.50">predict (iris_app.py:29)</text></g><g><title>predict (sklearn/ensemble/_forest.py:826) (34 samples, 0.39%)</title><rect x="97.4519%" y="132" width="0.3920%" height="15" fill="rgb(235,28,35)" fg:x="8452" fg:w="34"/><text x="97.7019%" y="142.50"></text></g><g><title>argmax (numpy/core/fromnumeric.py:1229) (12 samples, 0.14%)</title><rect x="97.7055%" y="148" width="0.1384%" height="15" fill="rgb(210,56,17)" fg:x="8474" fg:w="12"/><text x="97.9555%" y="158.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:59) (12 samples, 0.14%)</title><rect x="97.7055%" y="164" width="0.1384%" height="15" fill="rgb(224,130,29)" fg:x="8474" fg:w="12"/><text x="97.9555%" y="174.50"></text></g><g><title>run (anyio/_backends/_asyncio.py:807) (7,829 samples, 90.27%)</title><rect x="7.6214%" y="100" width="90.2686%" height="15" fill="rgb(235,212,8)" fg:x="661" fg:w="7829"/><text x="7.8714%" y="110.50">run (anyio/_backends/_asyncio.py:807)</text></g><g><title>all (8,673 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(223,33,50)" fg:x="0" fg:w="8673"/><text x="0.2500%" y="62.50"></text></g><g><title>_bootstrap (threading.py:973) (8,016 samples, 92.42%)</title><rect x="7.5752%" y="68" width="92.4248%" height="15" fill="rgb(219,149,13)" fg:x="657" fg:w="8016"/><text x="7.8252%" y="78.50">_bootstrap (threading.py:973)</text></g><g><title>_bootstrap_inner (threading.py:1016) (8,016 samples, 92.42%)</title><rect x="7.5752%" y="84" width="92.4248%" height="15" fill="rgb(250,156,29)" fg:x="657" fg:w="8016"/><text x="7.8252%" y="94.50">_bootstrap_inner (threading.py:1016)</text></g><g><title>run (anyio/_backends/_asyncio.py:816) (183 samples, 2.11%)</title><rect x="97.8900%" y="100" width="2.1100%" height="15" fill="rgb(216,193,19)" fg:x="8490" fg:w="183"/><text x="98.1400%" y="110.50">r..</text></g><g><title>call_soon_threadsafe (asyncio/base_events.py:804) (182 samples, 2.10%)</title><rect x="97.9015%" y="116" width="2.0985%" height="15" fill="rgb(216,135,14)" fg:x="8491" fg:w="182"/><text x="98.1515%" y="126.50">c..</text></g><g><title>_write_to_self (asyncio/selector_events.py:135) (182 samples, 2.10%)</title><rect x="97.9015%" y="132" width="2.0985%" height="15" fill="rgb(241,47,5)" fg:x="8491" fg:w="182"/><text x="98.1515%" y="142.50">_..</text></g></svg></svg>